@charset "UTF-8";
/**
  Нормализация блочной модели
  по умолч. box-sizing это content box значит 
  with и height не вкл padding и border
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
   Убираем внутренние отступы слева тегам списков,
   у которых есть атрибут class
  */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
   Убираем внешние отступы body и двум другим тегам,
   у которых есть атрибут class
   этот код помогает избежать неожиданных отступов 
   у body, blockquote и figure, если они имеют class.
  */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
   Убираем внешние отступы вертикали нужным тегам,
   у которых есть атрибут class
  */
:where(h1, h2, h3, h4, h5, h6, p, ul, ol, dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
   Убираем стандартный маркер маркированному списку,
   у которого есть атрибут class
  */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
   Обнуляем вертикальные внешние отступы параграфа,
   объявляем локальную переменную для внешнего отступа вниз,
   чтобы избежать взаимодействие с более сложным селектором
  */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Все <p> без классов, которые не являются последними
  , получат отступ снизу.
  */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
   Упрощаем работу с изображениями и видео
  */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
   Наследуем свойства шрифт для полей ввода
  */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
  height: 100%;
  /**
     Убираем скачок интерфейса по горизонтали
     при появлении / исчезновении скроллбара
    */
  scrollbar-gutter: stable;
}

/**
   Плавный скролл
   с :has, это правило выбирает элементы, которые имеют цель (якорь), т.е. когда на странице есть элемент, на который ссылаются якорные ссылки.
  :target — это псевдокласс, который применяется, когда элемент на странице является якорем
   */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
  min-height: 100%;
  /**
     Унифицированный интерлиньяж
    */
  line-height: 1.5;
}

/**
   Нормализация высоты элемента ссылки при его инспектировании в DevTools
  */
a:where([class]) {
  display: inline-flex;
}

/**
   Курсор-рука при наведении на элемент
  */
button,
label {
  cursor: pointer;
}

/**
   Приводим к единому цвету svg-элементы
   (за исключением тех, у которых уже указан
   атрибут fill со значением 'none' или начинается с 'url')
   fill — это свойство отвечает за цвет заливки элемента SVG (например, цвет фона внутри фигуры).
  */
:where([fill]:not([fill=none], [fill^=url])) {
  fill: currentColor;
}

/**
   Приводим к единому цвету svg-элементы
   (за исключением тех, у которых уже указан
   атрибут stroke со значением 'none')
   stroke — это свойство отвечает за цвет обводки (границы) элемента SVG.
  */
:where([stroke]:not([stroke=none], [stroke^=url])) {
  stroke: currentColor;
}

/**
   Чиним баг задержки смены цвета при взаимодействии с svg-элементами
  */
svg * {
  transition-property: fill, stroke;
}

/**
   Приведение рамок таблиц в классический 'collapse' вид
  */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
   Удаляем все анимации и переходы для людей,
   которые предпочитают их не использовать
   этот код на чистом css и он сработает только в 
   том случае если у человека включена система
   уменьшения движения
  */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
@font-face {
  font-family: "Kumbh Sans";
  src: url("../fonts/KumbhSans-Regular.woff2") format("woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Kumbh Sans";
  src: url("../fonts//KumbhSans-Medium.woff2") format("woff2");
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Inter";
  src: url("../fonts/Inter-Regular.woff2") format("woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Inter";
  src: url("../fonts/Inter-Medium.woff2") format("woff2");
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Inter";
  src: url("../fonts/Inter-SemiBold.woff2") format("woff2");
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Inter";
  src: url("../fonts/Inter-Bold.woff2") format("woff2");
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
/*
будет работать только с устройствами, которые поддерживают наведение (например, устройства с мышью).
(any-hover: hover) — встроенный медиазапрос в CSS, который проверяет возможность ховера на устройстве.
&:hover — это ссылка на родительский элемент,

это нужно чтобы избежать эффект залипания на тач скринах
 */
:root {
  --color-light: #FFFFFF;
  --color-dark: #141414;
  --color-dark-10: #1A1A1A;
  --color-dark-15: #262626;
  --color-dark-20: #333333;
  --color-dark-40: #666666;
  --color-gray-50: #7E7E81;
  --color-gray-60: #98989A;
  --color-accent: #FFD11A;
  --color-red: #FF5500;
  --border: 0.0625rem solid var(--color-dark-15);
  --font-family-base: "Inter", sans-serif;
  --font-family-accent: "Kumbh Sans", sans-serif;
  --container-width: 100rem;
  --container-padding-x: 1rem;
  --transition-duration: 0.2s;
}
@media (width <= 90.06125rem) {
  :root {
    --container-width: 80rem;
  }
}

.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--contai ner-padding-x);
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

@media (width <= 47.99875rem) {
  .hidden-mobile {
    display: none !important;
  }
}

@media (width > 47.99875rem) {
  .visible-mobile {
    display: none !important;
  }
}

body {
  /*
  clamp это встроенная функция в CSS, а не в SCSS
  Что делает clamp()?
   clamp(min, preferred, max) → ограничивает значение в определенных пределах.
    min → минимальное значение
    preferred → желаемое (динамическое) значение
    max → максимальное значение
  */
  font-size: clamp(0.875rem, 0.8112745098rem + 0.2614379085vw, 1.125rem);
  font-family: var(--font-family-base);
  letter-spacing: -0.03em;
  color: var(--color-gray-50);
  background-color: var(--color-dark);
}

h1, .h1,
h2, .h2,
h3, .h3,
h4, .h4,
h5, .h5,
h6, .h6 {
  color: var(--color-light);
}

h1, .h1,
h2, .h2,
h3, .h3 {
  font-family: var(--font-family-accent);
  font-weight: 500;
}

h4, .h4,
h5, .h5,
h6, .h6 {
  font-weight: 600;
}

h1, .h1 {
  /*
  clamp это встроенная функция в CSS, а не в SCSS
  Что делает clamp()?
   clamp(min, preferred, max) → ограничивает значение в определенных пределах.
    min → минимальное значение
    preferred → желаемое (динамическое) значение
    max → максимальное значение
  */
  font-size: clamp(1.875rem, 1.237745098rem + 2.614379085vw, 4.375rem);
  line-height: 1.2;
}

h2, .h2 {
  /*
  clamp это встроенная функция в CSS, а не в SCSS
  Что делает clamp()?
   clamp(min, preferred, max) → ограничивает значение в определенных пределах.
    min → минимальное значение
    preferred → желаемое (динамическое) значение
    max → максимальное значение
  */
  font-size: clamp(1.75rem, 1.2720588235rem + 1.9607843137vw, 3.625rem);
  line-height: 1.3;
}

h3, .h3 {
  /*
  clamp это встроенная функция в CSS, а не в SCSS
  Что делает clamp()?
   clamp(min, preferred, max) → ограничивает значение в определенных пределах.
    min → минимальное значение
    preferred → желаемое (динамическое) значение
    max → максимальное значение
  */
  font-size: clamp(1.5rem, 1.2450980392rem + 1.045751634vw, 2.5rem);
  line-height: 1.5;
}

h4, .h4 {
  /*
  clamp это встроенная функция в CSS, а не в SCSS
  Что делает clamp()?
   clamp(min, preferred, max) → ограничивает значение в определенных пределах.
    min → минимальное значение
    preferred → желаемое (динамическое) значение
    max → максимальное значение
  */
  font-size: clamp(1.125rem, 0.9975490196rem + 0.522875817vw, 1.625rem);
  line-height: 1.5;
}

h5, .h5 {
  /*
  clamp это встроенная функция в CSS, а не в SCSS
  Что делает clamp()?
   clamp(min, preferred, max) → ограничивает значение в определенных пределах.
    min → минимальное значение
    preferred → желаемое (динамическое) значение
    max → максимальное значение
  */
  font-size: clamp(1.125rem, 1.0294117647rem + 0.3921568627vw, 1.5rem);
  line-height: 1.5;
}

h6, .h6 {
  /*
  clamp это встроенная функция в CSS, а не в SCSS
  Что делает clamp()?
   clamp(min, preferred, max) → ограничивает значение в определенных пределах.
    min → минимальное значение
    preferred → желаемое (динамическое) значение
    max → максимальное значение
  */
  font-size: clamp(1rem, 0.9362745098rem + 0.2614379085vw, 1.25rem);
  line-height: 1.5;
}

a,
label,
button,
input,
textarea,
select,
svg * {
  transition-duration: var(--transition-duration);
}

a {
  color: inherit;
}
@media (any-hover: hover) {
  a:hover {
    color: var(--color-accent);
  }
}
@media (any-hover: none) {
  a:active {
    color: var(--color-accent);
  }
}
a[class] {
  text-decoration: none;
}

:focus-visible {
  outline: 0.125rem dashed var(--color-light);
  outline-offset: 0.25rem;
  transition-duration: 0s !important;
}

.icon {
  display: inline-flex;
  align-items: center;
  column-gap: 0.625rem;
}
.icon::after {
  --size: 1.5rem;
  width: var(--size);
  height: var(--size);
  content: "";
  flex-shrink: 0;
  background-position: center;
  background-size: contain;
}
.icon--yellow-arrow::after {
  background-image: url("../../icons/arrow-top-right_yellow.svg");
}

.header__promo {
  padding-block: 1.25rem;
  text-align: center;
  border-bottom: var(--border);
}

/*# sourceMappingURL=main.css.map */
